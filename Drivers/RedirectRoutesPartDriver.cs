using System;
using Orchard.ContentManagement;
using Orchard.ContentManagement.Drivers;
using Hazza.Routes.Models;
using Orchard.ContentManagement.Handlers;
using Hazza.Routes.ViewModels;
using Orchard.Autoroute.Models;

// This code was generated by Orchardizer

namespace Hazza.Routes.Drivers {
    public class RedirectRoutesPartDriver : ContentPartDriver<RedirectRoutesPart> {
        protected override string Prefix {
            get { return "RedirectRoutesPart"; }
        }

        protected override DriverResult Editor(RedirectRoutesPart part, dynamic shapeHelper) {
            return ContentShape("Parts_RedirectRoutesPart_Edit",
                () => {
                    var vm = new RedirectRouteViewModel();
                    vm.MainPath = part.Has<AutoroutePart>() ? part.As<AutoroutePart>().Path : "";
                    vm.Routes = part.Routes;

                    return shapeHelper.EditorTemplate(
                        TemplateName: "Parts/RedirectRoutesPart",
                        Model: vm,
                        Prefix: Prefix);
                });
        }

        protected override DriverResult Editor(RedirectRoutesPart part, IUpdateModel updater, dynamic shapeHelper) {
            var vm = new RedirectRouteViewModel();
            updater.TryUpdateModel(vm, Prefix, null, null);
            return Editor(part, shapeHelper);
        }

        protected override void Importing(RedirectRoutesPart part, ImportContentContext context) {
            var partName = part.PartDefinition.Name;
            var _RoutesString = context.Attribute(partName, "RoutesString");
            if (_RoutesString != null) {
                part.RoutesString = _RoutesString;
            }
        }

        protected override void Exporting(RedirectRoutesPart part, ExportContentContext context) {
            context.Element(part.PartDefinition.Name).SetAttributeValue("RoutesString", part.RoutesString);
        }
    }
}